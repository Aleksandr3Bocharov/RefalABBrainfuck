* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-04-10
* https://github.com/Aleksandr3Bocharov/RefalABBrainfuck

*====================================================================
* RefalABBrainfuck (GUI версия)
*
* Программа "RefalABBrainfuck" написана
* на языке программирования РефалАБ.
* https://github.com/Aleksandr3Bocharov/RefalAB
*
* Интерпретатор языка программирования Brainfuck
* на РефалАБ.
*
* Программа "RefalABBrainfuck" интерпретирует 
* код на языке Brainfuck из исходного файла.
*====================================================================

RefalABBrainfuck_GUI +
    START
    ENTRY Go
    EXTRN Put_Char, Get_Char
    EXTRN GUI_Init, GUI_Close, Dialog_FileName, Dialog_Is_Exit, Dialog_File_Not_Exist
    EXTRN View_Errors_Clear, View_Errors_Add, View_Errors_Show
    EXTRN Prout, M1, P1, Symb, Br, Dg
    EXTRN Map, Map_Accumulator, Del_Accumulator, Load_File, Exist_File
    EXTRN True, False
    EMPTY Symbols, Lines, Fails, Fails11, Fails12, Next, Prev, Inc, Dec, Write, Read

Go      = <GUI_Init> <bf_FileName <Dialog_FileName>> <Prout> <GUI_Close>
            
bf_FileName
        = <bf_FileName_Aux <Dialog_Is_Exit>>
    EF  = <Open_File <Exist_File EF> EF>

bf_FileName_Aux
    /True/ +
        =
    /False/ +
        = <bf_FileName <Dialog_FileName>>

Open_File
    /False/ E0 +
        = <Dialog_File_Not_Exist> <bf_FileName <Dialog_FileName>>
    /True/ EF +
        = +
* Загрузка строк файла в E.Lines := (E(O)L)*
        <Br /Lines/ '=' <Load_File /0/ EF>> +
* Преобразование E.Lines в E.Symbols := (S(O)S S(N)R S(N)C)* 
        <Br /Symbols/ '=' +
        <Del_Accumulator <Map_Accumulator /Do_Rows/ /1/ <Dg /Lines/>>>> +
* Запуск лексического анализатора
        <If_Tokenizer <Tokenizer <Dg /Symbols/>>>

Do_Rows
    SR (EL) +
        = <P1 SR> +
        <Del_Accumulator <Map_Accumulator /Do_Columns/ (SR /1/) EL>>
                      
Do_Columns
    (SR SC) SS +
        = (SR <P1 SC>) (SS SR SC)

If_Tokenizer
* Если Fails, то вывод ошибок
    /Fails/ EE +
        = <View_Errors_Add 'FATAL_ERROR (99): ' +
        'Имеется одна или больше ' +
        'синтаксических ошибок.'> +
        <Map /Do_View_Errors_Add/ EE> +
        <Is_View_Errors_Show <View_Errors_Show>>
* Запуск синтаксического анализатора 
    ET  = <Br 'e.ParsingTree' '=' <Parser ET>> +
* Запуск интерпретатора
        <Prout> <Interpretator <Dg 'e.ParsingTree'>> +
        <bf_FileName <Dialog_FileName>>

Do_View_Errors_Add
    (EL) +
        = <View_Errors_Add EL>

Is_View_Errors_Show
    /True/ +
        = <View_Errors_Clear> <bf_FileName <Dialog_FileName>>
    /False/ +
        = <Is_View_Errors_Show_Aux <Dialog_Is_Exit>>

Is_View_Errors_Show_Aux
    /True/ +
        = <View_Errors_Clear>
    /False/ +
        = <Is_View_Errors_Show <View_Errors_Show>>

* <Tokenizer (SS S(N)R S(N)C)*> == E('><+-.,[]')T | /Fails/ (V(O)E)+
Tokenizer
    ES  = <Tokenizer_Aux  <Map /Do_Tokenizer/ ES> (<Dg /Fails11/> <Dg /Fails12/>)>

Tokenizer_Aux
    ET () +
        = ET
    ET (EE) +
        = /Fails/ EE
  
Do_Tokenizer
    ('[' SR SC) +
        = <Br /Fails12/ '=' <Dg /Fails12/> +
        ('SYNTAX_ERROR(12): ' +
        'Не существует символа '']'' ' +
        'для символа ''['' ' +
        'на строке: ' <Symb SR> +
        ' и колонке: ' <Symb SC> '.')> +
        '['
    (']' E0) +
        = <Do_Tokenizer_Aux E0 <Dg /Fails12/>>
    (S('><+-.,')S E0) + 
        = SS 
    E0  =

Do_Tokenizer_Aux
    SR SC +
        = <Br /Fails11/ '=' <Dg /Fails11/> +
        ('SYNTAX_ERROR(11): ' +
        'Неожиданный символ '']'' ' +
        'на строке: ' <Symb SR> +
        ' и колонке: ' <Symb SC> '.')>
    SR SC E2 WF +
        = <Br /Fails12/ '=' E2> ']'

* <Parser E('><+-.,[]')T> == WN*
* WN ::= S(/Next/ /Prev/ /Inc/ /Dec/ /Write/ /Read/)L | (WN*)
Parser  =
    '>' ER +
        = /Next/ <Parser ER>
    '<' ER +
        = /Prev/ <Parser ER>
    '+' ER +
        = /Inc/ <Parser ER>
    '-' ER +
        = /Dec/ <Parser ER>
    '.' ER +
        = /Write/ <Parser ER>
    ',' ER +
        = /Read/ <Parser ER>
    '[' ER +
        = <Parser_Aux <Parser ER>>
    ']' ER +
        = (ER)      

Parser_Aux
    EP (ER) +
        = (EP) <Parser ER>

* <Interpretator WN*> == 
* WN ::= S(/Next/ /Prev/ /Inc/ /Dec/ /Write/ /Read/)L | (WN*)
Interpretator
    EP  = <Interpretator_Aux <Step_Interpretator EP () /0/ ()>>

Interpretator_Aux
    EC  = 

Step_Interpretator
    /Next/ ER (EB) SC () +
        = <Step_Interpretator ER (EB SC) /0/ ()>
    /Next/ ER (EB) SC (SN EA) +
        = <Step_Interpretator ER (EB SC) SN (EA)>   
    /Prev/ ER () SC (EA) +
        = <Step_Interpretator ER () /0/ (SC EA)>
    /Prev/ ER (EB SP) SC (EA) +
        = <Step_Interpretator ER (EB) SP (SC EA)>   
    /Inc/ E0 /255/ WA +
        = <Step_Interpretator E0 /0/ WA>
    /Inc/ E0 SC WA +
        = <Step_Interpretator E0 <P1 SC> WA>     							
    /Dec/ E0 /0/ WA +
        = <Step_Interpretator E0 /255/ WA>
    /Dec/ E0 SC WA +
        = <Step_Interpretator E0 <M1 SC> WA>   
    /Write/ E0 SC WA +
        = <Put_Char SC> +
        <Step_Interpretator E0 SC WA>												
    /Read/ E0 SC WA +
        = <Step_Interpretator E0 <Get_Char> WA>					
    WN ER WB /0/ WA +
        = <Step_Interpretator ER WB /0/ WA>
    (EN) ER WB SC WA +
        = <Step_Interpretator (EN) ER +
        <Step_Interpretator EN WB SC WA>>
    E0  = E0

    END
