* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-05-25
* https://github.com/Aleksandr3Bocharov/RefalABBrainfuck

*====================================================================
* RefalABBrainfuck (GUI версия)
*
* Программа "RefalABBrainfuck" написана
* на языке программирования РефалАБ.
* https://github.com/Aleksandr3Bocharov/RefalAB
*
* Интерпретатор языка программирования Brainfuck
* на РефалАБ.
*
* Программа "RefalABBrainfuck" интерпретирует 
* код на языке Brainfuck из исходного файла.
*====================================================================

RefalABBrainfuck_GUI +
    START

    ENTRY Go
    EXTRN Symbols, Tokenizer, Parser, Interpretator, Fails
    EXTRN GUI_Init, GUI_Close
    EXTRN Dialog_FileName, Dialog_Is_Exit, Dialog_File_Not_Exist, Dialog_File_Not_Open
    EXTRN View_Errors_Clear, View_Errors_Add, View_Errors_Show
    EXTRN Prout, Br, Dg, Map, Load_File, Exist_File
    EXTRN True, False, NULL, FEOF, FError
    EMPTY Lines, Parsing_Tree

    IMPL

Go      = <GUI_Init> <bf_FileName <Dialog_FileName>> <Prout> <GUI_Close>
            
bf_FileName
        = <bf_FileName_Aux <Dialog_Is_Exit>>
    E.FileName +
        = <Open_File <Exist_File E.FileName> E.FileName>

bf_FileName_Aux
    /True/ +
        =
    /False/ +
        = <bf_FileName <Dialog_FileName>>

Open_File
    /False/ E._ +
        = <Dialog_File_Not_Exist> <bf_FileName <Dialog_FileName>>
    /True/ E.FileName +
        = <Open_File_Aux <Load_File /0/ E.FileName>>

Open_File_Aux
    E.Open_Error /NULL/ +
        = <Dialog_File_Not_Open E.Open_Error> <bf_FileName <Dialog_FileName>>
    E.Lines V(/FEOF/ /FError/).EOF E._ +
        = <Br /Lines/ '=' E.Lines> +
* Запуск лексического анализатора
        <If_Tokenizer <Tokenizer <Symbols <Dg /Lines/>>>>

If_Tokenizer
* Если Fails, то вывод ошибок
    /Fails/ E.Errors +
        = <View_Errors_Add 'FATAL_ERROR (99): ' +
            'Имеется одна или больше ' +
            'синтаксических ошибок.'> +
        <Map /Do_View_Errors_Add/ E.Errors> +
        <Is_View_Errors_Show <View_Errors_Show>>
* Запуск синтаксического анализатора 
    E.Tokens +
        = <Br /Parsing_Tree/ '=' <Parser E.Tokens>> +
* Запуск интерпретатора
        <Prout> <Interpretator <Dg /Parsing_Tree/>> +
        <bf_FileName <Dialog_FileName>>

Do_View_Errors_Add
    (E.Error) +
        = <View_Errors_Add E.Error>

Is_View_Errors_Show
    /True/ +
        = <View_Errors_Clear> <bf_FileName <Dialog_FileName>>
    /False/ +
        = <Is_View_Errors_Show_Aux <Dialog_Is_Exit>>

Is_View_Errors_Show_Aux
    /True/ +
        = <View_Errors_Clear>
    /False/ +
        = <Is_View_Errors_Show <View_Errors_Show>>

    END
