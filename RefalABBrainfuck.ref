* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-04-18
* https://github.com/Aleksandr3Bocharov/RefalABBrainfuck

*====================================================================
* RefalABBrainfuck
*
* Программа "RefalABBrainfuck" написана
* на языке программирования РефалАБ.
* https://github.com/Aleksandr3Bocharov/RefalAB
*
* Интерпретатор языка программирования Brainfuck
* на РефалАБ.
*
* Программа "RefalABBrainfuck" интерпретирует 
* код на языке Brainfuck из исходного файла.
*====================================================================

RefalABBrainfuck +
    START
    ENTRY Go
    EXTRN Put_Char, Get_Char
    EXTRN Prout, M1, P1, Symb, Br, Dg
    EXTRN Map, Map_Accumulator, Del_Accumulator, Load_File, Exist_File
    EXTRN Platform, System, Arg, Exit
    EXTRN Windows, True, False
    EMPTY Symbols, Lines, Fails, Fails11, Fails12, Next, Prev, Inc, Dec, Write, Read

Go      = <chcp_UTF8 <Platform>> <Help> +
        <Args (<Arg /1/>) <Arg /2/>> +
* Преобразование E.Lines в E.Symbols := (O.S N.R N.C)* 
        <Br /Symbols/ '=' +
        <Del_Accumulator <Map_Accumulator /Do_Rows/ /1/ <Dg /Lines/>>>> +
* Запуск лексического анализатора
        <If_Tokenizer <Tokenizer <Dg /Symbols/>>>

* Смена кодовой страницы в Windows на UTF-8
chcp_UTF8
    /Windows/ +
        = <chcp_UTF8_Aux <System 'chcp 65001'>> 
    E.0 =

chcp_UTF8_Aux
    E.0 =

* Вывод справки
Help    = <Prout 'Интерпретатор языка ' +
        'программирования Brainfuck на РефалАБ.\n\n' +
        'Программа "RefalABBrainfuck" ' + 
        'интерпретирует код на языке Brainfuck ' +
        'из исходного файла.\n'>

Args    
    (E.0) V.1 +
        = <Args_Error>
    ()  = <Args_Error>
    (E.F) +
        = <Open_File <Exist_File E.F> E.F>

Args_Error
        = <Prout 'FATAL_ERROR (9): ' +
        'Синтаксис - RefalABBrainfuck имя_файла\n'> +
        <Exit /9/>

Open_File
    /False/ E.F +
        = <Prout 'FATAL_ERROR (19): ' +
        'Исходный файл "' E.F '" не существует.\n'> +
        <Exit /19/>
    /True/ E.F +
        = <Prout 'Открытие исходного файла "' E.F '" ' +
        'с кодом на языке программирования ' +
        'Brainfuck.\n'> +
* Загрузка строк файла в E.Lines := (E(O).L)*
        <Br /Lines/ '=' <Load_File /0/ E.F>>

Do_Rows
    S.R (E.L) +
        = <P1 S.R> +
        <Del_Accumulator <Map_Accumulator /Do_Columns/ (S.R /1/) E.L>>	
                      
Do_Columns
    (S.R S.C) S.S +
        = (SR <P1 S.C>) (S.S S.R S.C)

If_Tokenizer
* Если Fails, то завершение программы
    /Fails/ E.E +
        = <Prout 'FATAL_ERROR (99): ' +
        'Имеется одна или больше ' +
        'синтаксических ошибок.'> +
        <Map /Do_Prout_Line/ E.E> +
        <Prout> +
        <Exit /99/>
* Запуск синтаксического анализатора 
    E.T = <Br 'e.ParsingTree' '=' <Parser E.T>> +
* Запуск интерпретатора
        <Prout 'Запуск интерпретатора кода ' +
        'на языке программирования Brainfuck.\n'> +
        <Interpretator <Dg 'e.ParsingTree'>>

Do_Prout_Line
    (E.L) +
        = <Prout E.L>

* <Tokenizer (S.S N.R N.C)*> == E('><+-.,[]').T | /Fails/ (V(O).E)+
Tokenizer
    E.S = <Tokenizer_Aux  <Map /Do_Tokenizer/ E.S> (<Dg /Fails11/> <Dg /Fails12/>)>

Tokenizer_Aux
    E.T () +
        = E.T
    E.T (E.E) +
        = /Fails/ E.E
  
Do_Tokenizer
    ('[' S.R S.C) +
        = <Br /Fails12/ '=' <Dg /Fails12/> +
        ('SYNTAX_ERROR(12): ' +
        'Не существует символа '']'' ' +
        'для символа ''['' ' +
        'на строке: ' <Symb S.R> +
        ' и колонке: ' <Symb S.C> '.')> +
        '['
    (']' E.0) +
        = <Do_Tokenizer_Aux E.0 <Dg /Fails12/>>
    (S('><+-.,').S E.0) + 
        = S.S
    E.0 =

Do_Tokenizer_Aux
    S.R S.C +
        = <Br /Fails11/ '=' <Dg /Fails11/> +
        ('SYNTAX_ERROR(11): ' +
        'Неожиданный символ '']'' ' +
        'на строке: ' <Symb S.R> +
        ' и колонке: ' <Symb S.C> '.')>
    S.R S.C E.2 W.F +
        = <Br /Fails12/ '=' E.2> ']'

* <Parser E('><+-.,[]').T> == W.N*
* W.N ::= S(/Next/ /Prev/ /Inc/ /Dec/ /Write/ /Read/).L | (W.N*)
Parser  =
    '>' E.R +
        = /Next/ <Parser E.R>
    '<' E.R +
        = /Prev/ <Parser E.R>
    '+' E.R +
        = /Inc/ <Parser E.R>
    '-' E.R +
        = /Dec/ <Parser E.R>
    '.' E.R +
        = /Write/ <Parser E.R>
    ',' E.R +
        = /Read/ <Parser E.R>
    '[' E.R +
        = <Parser_Aux <Parser E.R>>
    ']' E.R +
        = (E.R)      

Parser_Aux
    E.P (E.R) +
        = (E.P) <Parser E.R>

* <Interpretator W.N*> == 
* W.N ::= S(/Next/ /Prev/ /Inc/ /Dec/ /Write/ /Read/).L | (W.N*)
Interpretator
    E.P = <Interpretator_Aux <Step_Interpretator E.P () /0/ ()>>

Interpretator_Aux
    E.C = 

Step_Interpretator
    /Next/ E.R (E.B) S.C () +
        = <Step_Interpretator E.R (E.B S.C) /0/ ()>
    /Next/ E.R (E.B) S.C (S.N E.A) +
        = <Step_Interpretator E.R (E.B S.C) S.N (E.A)>   
    /Prev/ E.R () S.C (E.A) +
        = <Step_Interpretator E.R () /0/ (S.C E.A)>
    /Prev/ E.R (E.B S.P) S.C (E.A) +
        = <Step_Interpretator E.R (E.B) S.P (S.C E.A)>   
    /Inc/ E.0 /255/ W.A +
        = <Step_Interpretator E.0 /0/ W.A>
    /Inc/ E.0 S.C W.A +
        = <Step_Interpretator E.0 <P1 S.C> W.A>     							
    /Dec/ E.0 /0/ W.A +
        = <Step_Interpretator E.0 /255/ W.A>
    /Dec/ E.0 S.C W.A +
        = <Step_Interpretator E.0 <M1 S.C> W.A>   
    /Write/ E.0 S.C W.A +
        = <Put_Char S.C> +
        <Step_Interpretator E.0 S.C W.A>												
    /Read/ E.0 S.C W.A +
        = <Step_Interpretator E.0 <Get_Char> W.A>					
    W.N E.R W.B /0/ W.A +
        = <Step_Interpretator E.R W.B /0/ W.A>
    (E.N) E.R W.B S.C W.A +
        = <Step_Interpretator (E.N) E.R +
        <Step_Interpretator E.N W.B S.C W.A>>
    E.0 = E.0

    END
